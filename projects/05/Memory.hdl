// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux (in=load, sel=address[14], a=loadUpper, b=loadIO); 				// Whether we write to upper memory or I/O
    RAM16K (in=in, load=loadUpper, address=address[0..13], out=outUpper); 	// RAM16K (upper memory)
    DMux4Way (in=loadIO, sel=address[13..14], c=loadScreen);				// Load the screen only if first bits are 10
    Screen (in=in, load=loadScreen, address=address[0..12], out=outScreen); // Screen chip (8K rows)
    Keyboard (out=outKeyboard); 											// Keyboard chip (just 1 register)
    Mux16 (a=outScreen, b=outKeyboard, sel=address[13], out=outIO);         // If the address is 6000k, select the keyboard
    Mux16 (a=outUpper, b=outIO, sel=address[14], out=out); 					// Write to output based on the address
}